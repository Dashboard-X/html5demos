// Generated by CoffeeScript 1.6.2
(function() {
  var NWORKERS, bytearray, canvas, ctx, doNothing, drawCanvas, drop, endLoad, endLoading, handleFiles, handledrag, image, initworkers, sendToWorker, sliceBuffer, sliceBuffer2, startLoading, startProcess, start_time, typeffect, workers;

  document.addEventListener('DOMContentLoaded', function() {
    return handledrag();
  });

  NWORKERS = 1;

  canvas = document.getElementById('canvas');

  ctx = canvas.getContext('2d');

  image = new Image();

  workers = [];

  bytearray = [];

  typeffect = $("#effect").val();

  start_time = '';

  $("#effect").on('change', function() {
    typeffect = $(this).val();
    if ($("canvas").hasClass('done')) {
      return startProcess();
    }
  });

  $("#nworkers").slider({
    min: 1,
    max: 10,
    slide: function(e, ui) {
      $("#active_workers").html(ui.value);
      return NWORKERS = parseInt(ui.value);
    },
    stop: function(e, ui) {
      if ($("canvas").hasClass('done')) {
        return startProcess();
      }
    }
  });

  startLoading = function() {
    $(".add").hide();
    return $(".loading").show();
  };

  endLoading = function() {
    $(".add").show();
    return $(".loading").hide();
  };

  initworkers = function() {
    var i, _i, _results;

    _results = [];
    for (i = _i = 0; 0 <= NWORKERS ? _i < NWORKERS : _i > NWORKERS; i = 0 <= NWORKERS ? ++_i : --_i) {
      _results.push(workers[i].addEventListener('message', function(e) {
        bytearray[e.data.id] = sliceBuffer(e.data.buffer, e.data.start, e.data.end);
        if (bytearray.length === NWORKERS) {
          return drawCanvas();
        }
      }, false));
    }
    return _results;
  };

  drawCanvas = function() {
    var end_time, i, imgdata, imgdatalen, tmp, total_time, _i, _j, _ref, _ref1;

    endLoading();
    $(".add").hide();
    console.log(bytearray);
    tmp = [];
    for (i = _i = 0, _ref = bytearray.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      tmp = tmp.concat(bytearray[i]);
    }
    imgdata = ctx.getImageData(0, 0, canvas.width, canvas.height);
    imgdatalen = imgdata.data.length;
    console.log(tmp);
    for (i = _j = 0, _ref1 = tmp.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
      imgdata.data[i] = tmp[i];
    }
    ctx.putImageData(imgdata, 0, 0);
    $("canvas").addClass('done');
    end_time = new Date().getTime();
    total_time = end_time - start_time;
    $("p.esecution").html('Total esecution time: ' + total_time + 'ms');
    return console.log(total_time);
  };

  handledrag = function() {
    var dropbox;

    dropbox = document.getElementById('dropbox');
    dropbox.addEventListener('dragenter', function(e) {
      return $("#dropbox").css('opacity', 0.3);
    }, false);
    dropbox.addEventListener('dragexit', function(e) {
      return doNothing();
    }, false);
    dropbox.addEventListener('dragover', doNothing, false);
    return dropbox.addEventListener('drop', drop, false);
  };

  doNothing = function(e) {
    e.stopPropagation();
    return e.preventDefault();
  };

  drop = function(e) {
    var count, files;

    e.stopPropagation();
    e.preventDefault();
    $("#dropbox").css('opacity', '1');
    startLoading();
    files = e.dataTransfer.files;
    count = files.length;
    if (count > 0) {
      return handleFiles(files);
    }
  };

  handleFiles = function(files) {
    var file, reader;

    file = files[0];
    reader = new FileReader();
    reader.onloadend = endLoad;
    return reader.readAsDataURL(file);
  };

  endLoad = function(e) {
    image.src = e.target.result;
    return image.onload = function() {
      if (image.width > 500 || image.height > 500) {
        alert("Image width and height must be under 500px");
        endLoading();
        return false;
      }
      return startProcess();
    };
  };

  startProcess = function() {
    var arraydata, boh, i, npixels, value, _i, _j, _len, _results;

    startLoading();
    for (i = _i = 0; 0 <= NWORKERS ? _i < NWORKERS : _i > NWORKERS; i = 0 <= NWORKERS ? ++_i : --_i) {
      workers[i] = new Worker('js/uok.js');
    }
    initworkers();
    start_time = new Date().getTime();
    canvas.height = image.height;
    canvas.width = image.width;
    ctx.drawImage(image, 0, 0);
    arraydata = ctx.getImageData(0, 0, image.width, image.height).data;
    npixels = parseInt(arraydata.length / NWORKERS);
    _results = [];
    for (i = _j = 0, _len = workers.length; _j < _len; i = ++_j) {
      value = workers[i];
      boh = i * npixels;
      _results.push(sendToWorker(i, {
        id: i,
        width: image.width,
        height: image.height,
        effect: typeffect,
        start: boh,
        end: boh + npixels,
        rgba: sliceBuffer2(arraydata, (i * npixels) - boh, ((i * npixels) + npixels) + boh)
      }));
    }
    return _results;
  };

  sendToWorker = function(id, data) {
    return workers[id].postMessage(data);
  };

  sliceBuffer2 = function(array, start, end) {
    var final, i, _i;

    final = [];
    for (i = _i = start; start <= end ? _i < end : _i > end; i = start <= end ? ++_i : --_i) {
      final[i] = array[i];
    }
    return final;
  };

  sliceBuffer = function(array, start, end) {
    var final, i, _i;

    final = [];
    for (i = _i = start; start <= end ? _i < end : _i > end; i = start <= end ? ++_i : --_i) {
      final[i - start] = array[i];
    }
    return final;
  };

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
